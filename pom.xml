<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.2.4.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.lan.example</groupId>
	<artifactId>tekton</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>tekton</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>1.8</java.version>
		<spring-cloud.version>Hoxton.SR1</spring-cloud.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-config-server</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-function-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<finalName>hello-sc</finalName>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>compile</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/${project.build.finalName}/WEB-INF/lib
							</outputDirectory>
							<includeScope>system</includeScope>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-dependency-plugin
										</artifactId>
										<versionRange>
											[2.10,)
										</versionRange>
										<goals>
											<goal>
												copy-dependencies
											</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>

				<plugin>
					<groupId>com.google.cloud.tools</groupId>
					<artifactId>jib-maven-plugin</artifactId>
					<version>1.6.1</version>
					<configuration>
						<from>
							<image>registry.cn-hangzhou.aliyuncs.com/dragonwell/dragonwell8:8.1.1-GA_alpine_x86_64_8u222-b67</image>
							<auth>
								<username>${env.REGISTRY_FROM_USERNAME}</username>
								<password>${env.REGISTRY_FROM_PASSWORD}</password>
							</auth>
						</from>
						<to>
							<image>registry.cn-hangzhou.aliyuncs.com/lyp/lanbox:v1.0</image>
							<auth>
								<username>${env.REGISTRY_TO_USERNAME}</username>
								<password>${env.REGISTRY_TO_PASSWORD}</password>
							</auth>
						</to>
						<container>
							<jvmFlags>
								<jvmFlag>-Xms1344m</jvmFlag>
								<jvmFlag>-Xmx1344m</jvmFlag>
								<!-- G1最佳实践 避免显式配置Xmn 会覆盖暂停时间目标 -->
								<!-- blog.51ctoF.com/zero01/2150696 -->
								<!-- <jvmFlag>-Xmn256m</jvmFlag> -->
								<jvmFlag>-XX:+DisableExplicitGC</jvmFlag>
								<jvmFlag>-Xdebug</jvmFlag>
								<!-- <jvmFlag>-XX:+EnableJFR</jvmFlag> -->
								<!-- gc log 相关参数 -->
								<jvmFlag>-Xloggc:/smartjvm/gc.log</jvmFlag>
								<jvmFlag>-XX:+PrintGCDetails</jvmFlag>
								<jvmFlag>-XX:+PrintGCDateStamps</jvmFlag>
								<jvmFlag>-XX:+PrintHeapAtGC</jvmFlag>
								<!--打印每次垃圾回收前,程序未中断的执行时间-->
								<!-- <jvmFlag>-XX:+PrintGCApplicationConcurrentTime</jvmFlag> -->
								<!--打印垃圾回收期间程序暂停的时间-->
								<jvmFlag>-XX:+PrintGCApplicationStoppedTime</jvmFlag>
								<!--打印每次minor GC后新的存活周期的阈值-->
								<jvmFlag>-XX:+PrintTenuringDistribution</jvmFlag>

								<jvmFlag>-XX:MaxMetaspaceSize=256M</jvmFlag>
								<jvmFlag>-XX:MetaspaceSize=256M</jvmFlag>
								<jvmFlag>-XX:+UseG1GC</jvmFlag>
								<!--每次年轻代垃圾回收的最长时间(最大暂停时间)-->
								<jvmFlag>-XX:MaxGCPauseMillis=100</jvmFlag>
								<jvmFlag>-XX:+ParallelRefProcEnabled</jvmFlag>
								<jvmFlag>-XX:ErrorFile=/smartjvm/hs_err.log</jvmFlag>

								<jvmFlag>-XX:+UnlockExperimentalVMOptions</jvmFlag>
								<jvmFlag>-XX:+UseCGroupMemoryLimitForHeap</jvmFlag>

								<jvmFlag>-XX:HeapDumpPath=/smartjvm</jvmFlag>
								<jvmFlag>-XX:+HeapDumpOnOutOfMemoryError</jvmFlag>
								<jvmFlag>-XX:+PrintClassHistogramBeforeFullGC</jvmFlag>
								<jvmFlag>-XX:+PrintClassHistogramAfterFullGC</jvmFlag>
								<!--启动时打印JVM参数-->
								<jvmFlag>-XX:+PrintCommandLineFlags</jvmFlag>
							</jvmFlags>
							<environment>
								<!--添加时区-->
								<TZ>Asia/Shanghai</TZ>
							</environment>
							<volumes>
								<!--镜像内创建文件夹，提供放置gc.log 如果采用tomcat运行，gc.log会在tomcat/logsM目录下生成 -->
								<volume>/smartjvm</volume>
							</volumes>
							 <labels>
								 <maintainer>liangyuanpengem@163.com</maintainer>
                            </labels>

							<mainClass>com.lan.example.tekton.TektonApplication</mainClass>
							<!--使用当前时间-->
							<useCurrentTimestamp>true</useCurrentTimestamp>
							<ports>
								<port>80</port>
							</ports>
<!--							 <format>OCI</format>-->
						</container>
					</configuration>
				</plugin>

			</plugins>
		</pluginManagement>
	</build>

</project>
